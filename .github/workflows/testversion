name: Build and Push Docker Image with New Tag

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get current version
        id: get_version
        run: |
          echo "Fetching tags from Docker Hub"
          tags=$(curl -s -H "Authorization: Bearer ${{ secrets.DOCKER_PASSWORD }}" "https://registry.hub.docker.com/v2/repositories/praveen4901/comeonda/tags?page_size=100" | jq -r '."results"[]["name"]')
          if [ -z "$tags" ]; then
            echo "No tags found, setting initial version to v1.0.0"
            next_version="v1.0.0"
          else
            echo "Current tags: $tags"
            latest_version=$(echo "$tags" | grep -E '^v[0-9]+(\.[0-9]+)*$' | sort -V | tail -n 1)
            IFS='.' read -r -a version_parts <<< "${latest_version#v}"
            ((version_parts[2]++))
            next_version="v${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"
          fi
          echo "Next version: $next_version"
          echo "::set-output name=next_version::$next_version"

      - name: Build and push the Docker image
        uses: docker/build-push-action@v5
        with:
          context: .  # Adjust if your Dockerfile is in a different directory
          file: ./Dockerfile  # Specify your Dockerfile
          push: true
          tags: praveen4901/comeonda:${{ steps.get_version.outputs.next_version }},praveen4901/comeonda:latest

      - name: Tag the repository
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git tag ${{ steps.get_version.outputs.next_version }}
          git push origin ${{ steps.get_version.outputs.next_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
